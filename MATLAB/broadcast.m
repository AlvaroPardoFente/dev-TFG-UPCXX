%% Import data from text file
% Script for importing data from the following text file:
%
%    filename: mpi_broadcast_array.csv
%
% Auto-generated by MATLAB on 20-May-2024 20:04:49

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 4);

% Specify range and delimiter
opts.DataLines = [3, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["Size", "Timepoint", "Index", "Time"];
opts.VariableTypes = ["double", "categorical", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, "Timepoint", "EmptyFieldRule", "auto");

% Import the data
mpibroadcastarray = readtable("mpi_broadcast_array.csv", opts);
upcxxbroadcastarray = readtable("upcxx_broadcast_array.csv", opts);

%% Clear temporary variables
clear opts

unique_sizes = unique(mpibroadcastarray.Size);

mpi_clean_data = rmopersize(mpibroadcastarray);
upcxx_clean_data = rmopersize(upcxxbroadcastarray);

mpi_time_per_elem = mpi_clean_data.Time ./ mpi_clean_data.Size;
mpi_mean_time_per_elem = mean(mpi_time_per_elem);
upcxx_time_per_elem = upcxx_clean_data.Time ./ upcxx_clean_data.Size;
upcxx_mean_time_per_elem = mean(upcxx_time_per_elem);

mpi_mean_times = arrayfun(@(size) mean(mpi_clean_data.Time(mpi_clean_data.Size == size)), unique_sizes);
upcxx_mean_times = arrayfun(@(size) mean(upcxx_clean_data.Time(upcxx_clean_data.Size == size)), unique_sizes);

mpi_median_times = arrayfun(@(size) median(mpi_clean_data.Time(mpi_clean_data.Size == size)), unique_sizes);
upcxx_median_times = arrayfun(@(size) median(upcxx_clean_data.Time(upcxx_clean_data.Size == size)), unique_sizes);

n_mpi = normalize(mpi_clean_data.Time);
n_upcxx = normalize(upcxxbroadcastarray.Time);

% Create a new figure
figure

tiledlayout("flow");

% Se eliminan outliers para cada tamaño y se hace la media
nexttile
loglog(unique_sizes, mpi_mean_times, "-o", "DisplayName", "mpi mean")
hold on
loglog(unique_sizes, upcxx_mean_times, "-o", "DisplayName", "upcxx mean")

xlabel('Size');
ylabel('Time (s)');
title('Mean times without outliers');
grid on;

% Se hace la mediana para cada tamaño
nexttile
loglog(unique_sizes, mpi_median_times, "-o", "DisplayName", "mpi median")
hold on
loglog(unique_sizes, upcxx_median_times, "-o", "DisplayName", "upcxx median")

xlabel('Size');
ylabel('Time (s)');
title('Median times');
grid on;

% Se divide el tiempo por el tamaño para cada elemento, faltaría cambiar
% el eje x
nexttile
plot(mpi_time_per_elem)
hold on
plot(upcxx_time_per_elem)
xlabel('Rows');
ylabel('Time(s)/Size');
title('Time per element');
grid on;

% Prueba de boxchart. Se comparan tiempos de mpi y upcxx para un solo tamaño
nexttile
% Extract data for size 1024
size_4M_mpi = mpibroadcastarray.Time(mpibroadcastarray.Size == 2^22);
size_4M_upcxx = upcxxbroadcastarray.Time(upcxxbroadcastarray.Size == 2^22);

% Combine the data into a single table
combined_times_4M = table([size_4M_mpi; size_4M_upcxx], ...
                            [repmat({'MPI'}, length(size_4M_mpi), 1); repmat({'UPCXX'}, length(size_4M_upcxx), 1)], ...
                            'VariableNames', {'Time', 'Method'});
boxchart(categorical(combined_times_4M.Method), combined_times_4M.Time);

xlabel('Method');
ylabel('Time (s)');
title('Comparison of Times at Size 1M');
grid on;